#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ecsClusterCdkStack = exports.rdsCdkStack = exports.vpcCdkStack = exports.app = void 0;
require("source-map-support/register");
const cdk = require("aws-cdk-lib");
const vpc_cdk_stack_1 = require("../lib/vpc-cdk-stack");
const iam_cdk_stack_1 = require("../lib/iam-cdk-stack");
const rds_cdk_stack_1 = require("../lib/rds-cdk-stack");
const ecs_cluster_cdk_stack_1 = require("../lib/ecs-cluster-cdk-stack");
const ecs_service_alb_cdk_stack_1 = require("../lib/ecs-service-alb-cdk-stack");
const app_conf_1 = require("../config/app.conf");
const env = {
    account: app_conf_1.default.account,
    region: app_conf_1.default.region
};
const app = new cdk.App();
exports.app = app;
const vpcCdkStack = new vpc_cdk_stack_1.VpcCdkStack(app, 'VpcCdkStack', { env });
exports.vpcCdkStack = vpcCdkStack;
const iamCdkStack = new iam_cdk_stack_1.IamCdkStack(app, 'IamCdkStack', { env });
const rdsCdkStack = new rds_cdk_stack_1.RdsCdkStack(app, 'RdsCdkStack', {
    vpc: vpcCdkStack.vpc,
    backendSG: vpcCdkStack.backendServerSG,
    dbSG: vpcCdkStack.dbserverSG,
    env
});
exports.rdsCdkStack = rdsCdkStack;
const ecsClusterCdkStack = new ecs_cluster_cdk_stack_1.EcsClusterCdkStack(app, 'EcsClusterCdkStack', {
    vpc: vpcCdkStack.vpc,
    securityGroup: vpcCdkStack.backendServerSG,
    env
});
exports.ecsClusterCdkStack = ecsClusterCdkStack;
new ecs_service_alb_cdk_stack_1.EcsServiceAlbCdkStack(app, 'EcsServiceAlbCdkStack', {
    albIsInternetFacing: app_conf_1.default.albIsInternetFacing,
    vpc: vpcCdkStack.vpc,
    securityGroup: vpcCdkStack.webserverSG,
    ecsCluster: ecsClusterCdkStack.ecsCluster,
    secret: rdsCdkStack.dbCluster.secret,
    env
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXdzLWNkay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImF3cy1jZGsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLHVDQUFxQztBQUNyQyxtQ0FBbUM7QUFFbkMsd0RBQW1EO0FBQ25ELHdEQUFtRDtBQUNuRCx3REFBbUQ7QUFDbkQsd0VBQWtFO0FBQ2xFLGdGQUF5RTtBQUV6RSxpREFBc0M7QUFFdEMsTUFBTSxHQUFHLEdBQUc7SUFDVixPQUFPLEVBQUUsa0JBQUksQ0FBQyxPQUFPO0lBQ3JCLE1BQU0sRUFBRSxrQkFBSSxDQUFDLE1BQU07Q0FDcEIsQ0FBQTtBQUVELE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBNEJ4QixrQkFBRztBQTFCTCxNQUFNLFdBQVcsR0FBRyxJQUFJLDJCQUFXLENBQUMsR0FBRyxFQUFFLGFBQWEsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7QUEyQi9ELGtDQUFXO0FBMUJiLE1BQU0sV0FBVyxHQUFHLElBQUksMkJBQVcsQ0FBQyxHQUFHLEVBQUUsYUFBYSxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUVqRSxNQUFNLFdBQVcsR0FBRyxJQUFJLDJCQUFXLENBQUMsR0FBRyxFQUFFLGFBQWEsRUFBRTtJQUN0RCxHQUFHLEVBQUUsV0FBVyxDQUFDLEdBQUc7SUFDcEIsU0FBUyxFQUFFLFdBQVcsQ0FBQyxlQUFlO0lBQ3RDLElBQUksRUFBRSxXQUFXLENBQUMsVUFBVTtJQUM1QixHQUFHO0NBQ0osQ0FBQyxDQUFDO0FBb0JELGtDQUFXO0FBbEJiLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSwwQ0FBa0IsQ0FBQyxHQUFHLEVBQUUsb0JBQW9CLEVBQUU7SUFDM0UsR0FBRyxFQUFFLFdBQVcsQ0FBQyxHQUFHO0lBQ3BCLGFBQWEsRUFBRSxXQUFXLENBQUMsZUFBZTtJQUMxQyxHQUFHO0NBQ0osQ0FBQyxDQUFDO0FBZUQsZ0RBQWtCO0FBYnBCLElBQUksaURBQXFCLENBQUMsR0FBRyxFQUFFLHVCQUF1QixFQUFFO0lBQ3RELG1CQUFtQixFQUFFLGtCQUFJLENBQUMsbUJBQW1CO0lBQzdDLEdBQUcsRUFBRSxXQUFXLENBQUMsR0FBRztJQUNwQixhQUFhLEVBQUUsV0FBVyxDQUFDLFdBQVc7SUFDdEMsVUFBVSxFQUFFLGtCQUFrQixDQUFDLFVBQVU7SUFDekMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxTQUFTLENBQUMsTUFBTTtJQUNwQyxHQUFHO0NBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuaW1wb3J0ICdzb3VyY2UtbWFwLXN1cHBvcnQvcmVnaXN0ZXInO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcblxuaW1wb3J0IHsgVnBjQ2RrU3RhY2sgfSBmcm9tICcuLi9saWIvdnBjLWNkay1zdGFjayc7XG5pbXBvcnQgeyBJYW1DZGtTdGFjayB9IGZyb20gJy4uL2xpYi9pYW0tY2RrLXN0YWNrJztcbmltcG9ydCB7IFJkc0Nka1N0YWNrIH0gZnJvbSAnLi4vbGliL3Jkcy1jZGstc3RhY2snO1xuaW1wb3J0IHsgRWNzQ2x1c3RlckNka1N0YWNrIH0gZnJvbSAnLi4vbGliL2Vjcy1jbHVzdGVyLWNkay1zdGFjayc7XG5pbXBvcnQgeyBFY3NTZXJ2aWNlQWxiQ2RrU3RhY2sgfSBmcm9tICcuLi9saWIvZWNzLXNlcnZpY2UtYWxiLWNkay1zdGFjayc7XG5cbmltcG9ydCBjb25mIGZyb20gJy4uL2NvbmZpZy9hcHAuY29uZic7XG5cbmNvbnN0IGVudiA9IHsgXG4gIGFjY291bnQ6IGNvbmYuYWNjb3VudCxcbiAgcmVnaW9uOiBjb25mLnJlZ2lvblxufVxuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuXG5jb25zdCB2cGNDZGtTdGFjayA9IG5ldyBWcGNDZGtTdGFjayhhcHAsICdWcGNDZGtTdGFjaycsIHsgZW52IH0pO1xuY29uc3QgaWFtQ2RrU3RhY2sgPSBuZXcgSWFtQ2RrU3RhY2soYXBwLCAnSWFtQ2RrU3RhY2snLCB7IGVudiB9KTtcblxuY29uc3QgcmRzQ2RrU3RhY2sgPSBuZXcgUmRzQ2RrU3RhY2soYXBwLCAnUmRzQ2RrU3RhY2snLCB7IFxuICB2cGM6IHZwY0Nka1N0YWNrLnZwYyxcbiAgYmFja2VuZFNHOiB2cGNDZGtTdGFjay5iYWNrZW5kU2VydmVyU0csXG4gIGRiU0c6IHZwY0Nka1N0YWNrLmRic2VydmVyU0csXG4gIGVudlxufSk7XG5cbmNvbnN0IGVjc0NsdXN0ZXJDZGtTdGFjayA9IG5ldyBFY3NDbHVzdGVyQ2RrU3RhY2soYXBwLCAnRWNzQ2x1c3RlckNka1N0YWNrJywgeyBcbiAgdnBjOiB2cGNDZGtTdGFjay52cGMsXG4gIHNlY3VyaXR5R3JvdXA6IHZwY0Nka1N0YWNrLmJhY2tlbmRTZXJ2ZXJTRyxcbiAgZW52XG59KTtcblxubmV3IEVjc1NlcnZpY2VBbGJDZGtTdGFjayhhcHAsICdFY3NTZXJ2aWNlQWxiQ2RrU3RhY2snLCB7XG4gIGFsYklzSW50ZXJuZXRGYWNpbmc6IGNvbmYuYWxiSXNJbnRlcm5ldEZhY2luZyxcbiAgdnBjOiB2cGNDZGtTdGFjay52cGMsXG4gIHNlY3VyaXR5R3JvdXA6IHZwY0Nka1N0YWNrLndlYnNlcnZlclNHLFxuICBlY3NDbHVzdGVyOiBlY3NDbHVzdGVyQ2RrU3RhY2suZWNzQ2x1c3RlcixcbiAgc2VjcmV0OiByZHNDZGtTdGFjay5kYkNsdXN0ZXIuc2VjcmV0LFxuICBlbnZcbn0pO1xuXG5leHBvcnQge1xuICBhcHAsXG4gIHZwY0Nka1N0YWNrLFxuICByZHNDZGtTdGFjayxcbiAgZWNzQ2x1c3RlckNka1N0YWNrXG59OyJdfQ==