"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("aws-cdk-lib");
const ec2 = require("aws-cdk-lib/aws-ec2");
const assertions_1 = require("aws-cdk-lib/assertions");
const Stack = require("../../lib/rds-cdk-stack");
let app;
let stack;
let template;
describe('RdsCdkStack', () => {
    let vpc;
    let securityGroup;
    beforeAll(() => {
        app = new cdk.App();
        // create reference stacks and resources
        const vpcStack = new cdk.Stack(app, 'VpcCdkStack');
        vpc = new ec2.Vpc(vpcStack, 'VPC', {});
        securityGroup = new ec2.SecurityGroup(vpcStack, 'SecurityGroup', { vpc });
        stack = new Stack.RdsCdkStack(app, 'RdsCdkStack', {
            vpc,
            backendSG: securityGroup,
            dbSG: securityGroup,
        });
        template = assertions_1.Template.fromStack(stack);
    });
    test('should create a RDS database instace with engine ', () => {
        template.hasResourceProperties('AWS::RDS::DBInstance', {
            Engine: 'mysql'
        });
    });
    test('should create a secret for Database', () => {
        template.hasResource('AWS::SecretsManager::Secret', {});
    });
    test('should create one instance in Database', () => {
        template.resourceCountIs('AWS::RDS::DBInstance', 1);
    });
    test('should create a Database subnet group', () => {
        template.hasResource('AWS::RDS::DBSubnetGroup', {});
    });
    test('should create three lambda functions for database initialization', () => {
        template.resourceCountIs('AWS::Lambda::Function', 3);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmRzLWNkay1zdGFjay50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmRzLWNkay1zdGFjay50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQW1DO0FBQ25DLDJDQUEyQztBQUMzQyx1REFBa0Q7QUFDbEQsaURBQWlEO0FBRWpELElBQUksR0FBWSxDQUFDO0FBQ2pCLElBQUksS0FBZ0IsQ0FBQztBQUNyQixJQUFJLFFBQWlDLENBQUM7QUFFdEMsUUFBUSxDQUFDLGFBQWEsRUFBRSxHQUFHLEVBQUU7SUFDM0IsSUFBSSxHQUFHLENBQUM7SUFDUixJQUFJLGFBQWEsQ0FBQztJQUVsQixTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ2IsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLHdDQUF3QztRQUN4QyxNQUFNLFFBQVEsR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ25ELEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN2QyxhQUFhLEdBQUcsSUFBSSxHQUFHLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxlQUFlLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBRTFFLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLGFBQWEsRUFBRTtZQUNoRCxHQUFHO1lBQ0gsU0FBUyxFQUFFLGFBQWE7WUFDeEIsSUFBSSxFQUFFLGFBQWE7U0FDcEIsQ0FBQyxDQUFDO1FBQ0gsUUFBUSxHQUFHLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZDLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLG1EQUFtRCxFQUFFLEdBQUcsRUFBRTtRQUM3RCxRQUFRLENBQUMscUJBQXFCLENBQUMsc0JBQXNCLEVBQUU7WUFDckQsTUFBTSxFQUFFLE9BQU87U0FDaEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMscUNBQXFDLEVBQUUsR0FBRyxFQUFFO1FBQy9DLFFBQVEsQ0FBQyxXQUFXLENBQUMsNkJBQTZCLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDMUQsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsd0NBQXdDLEVBQUUsR0FBRyxFQUFFO1FBQ2xELFFBQVEsQ0FBQyxlQUFlLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsdUNBQXVDLEVBQUUsR0FBRyxFQUFFO1FBQ2pELFFBQVEsQ0FBQyxXQUFXLENBQUMseUJBQXlCLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdEQsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsa0VBQWtFLEVBQUUsR0FBRyxFQUFFO1FBQzVFLFFBQVEsQ0FBQyxlQUFlLENBQUMsdUJBQXVCLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdkQsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XHJcbmltcG9ydCAqIGFzIGVjMiBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZWMyJztcclxuaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICdhd3MtY2RrLWxpYi9hc3NlcnRpb25zJztcclxuaW1wb3J0ICogYXMgU3RhY2sgZnJvbSAnLi4vLi4vbGliL3Jkcy1jZGstc3RhY2snO1xyXG5cclxubGV0IGFwcDogY2RrLkFwcDtcclxubGV0IHN0YWNrOiBjZGsuU3RhY2s7XHJcbmxldCB0ZW1wbGF0ZTogY2RrLmFzc2VydGlvbnMuVGVtcGxhdGU7XHJcblxyXG5kZXNjcmliZSgnUmRzQ2RrU3RhY2snLCAoKSA9PiB7XHJcbiAgbGV0IHZwYztcclxuICBsZXQgc2VjdXJpdHlHcm91cDtcclxuXHJcbiAgYmVmb3JlQWxsKCgpID0+IHtcclxuICAgIGFwcCA9IG5ldyBjZGsuQXBwKCk7XHJcbiAgICAvLyBjcmVhdGUgcmVmZXJlbmNlIHN0YWNrcyBhbmQgcmVzb3VyY2VzXHJcbiAgICBjb25zdCB2cGNTdGFjayA9IG5ldyBjZGsuU3RhY2soYXBwLCAnVnBjQ2RrU3RhY2snKTtcclxuICAgIHZwYyA9IG5ldyBlYzIuVnBjKHZwY1N0YWNrLCAnVlBDJywge30pO1xyXG4gICAgc2VjdXJpdHlHcm91cCA9IG5ldyBlYzIuU2VjdXJpdHlHcm91cCh2cGNTdGFjaywgJ1NlY3VyaXR5R3JvdXAnLCB7IHZwYyB9KTtcclxuXHJcbiAgICBzdGFjayA9IG5ldyBTdGFjay5SZHNDZGtTdGFjayhhcHAsICdSZHNDZGtTdGFjaycsIHtcclxuICAgICAgdnBjLFxyXG4gICAgICBiYWNrZW5kU0c6IHNlY3VyaXR5R3JvdXAsXHJcbiAgICAgIGRiU0c6IHNlY3VyaXR5R3JvdXAsXHJcbiAgICB9KTtcclxuICAgIHRlbXBsYXRlID0gVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKTtcclxuICB9KTtcclxuXHJcbiAgdGVzdCgnc2hvdWxkIGNyZWF0ZSBhIFJEUyBkYXRhYmFzZSBpbnN0YWNlIHdpdGggZW5naW5lICcsICgpID0+IHtcclxuICAgIHRlbXBsYXRlLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpSRFM6OkRCSW5zdGFuY2UnLCB7XHJcbiAgICAgIEVuZ2luZTogJ215c3FsJ1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ3Nob3VsZCBjcmVhdGUgYSBzZWNyZXQgZm9yIERhdGFiYXNlJywgKCkgPT4ge1xyXG4gICAgdGVtcGxhdGUuaGFzUmVzb3VyY2UoJ0FXUzo6U2VjcmV0c01hbmFnZXI6OlNlY3JldCcsIHt9KTtcclxuICB9KTtcclxuXHJcbiAgdGVzdCgnc2hvdWxkIGNyZWF0ZSBvbmUgaW5zdGFuY2UgaW4gRGF0YWJhc2UnLCAoKSA9PiB7XHJcbiAgICB0ZW1wbGF0ZS5yZXNvdXJjZUNvdW50SXMoJ0FXUzo6UkRTOjpEQkluc3RhbmNlJywgMSk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ3Nob3VsZCBjcmVhdGUgYSBEYXRhYmFzZSBzdWJuZXQgZ3JvdXAnLCAoKSA9PiB7XHJcbiAgICB0ZW1wbGF0ZS5oYXNSZXNvdXJjZSgnQVdTOjpSRFM6OkRCU3VibmV0R3JvdXAnLCB7fSk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ3Nob3VsZCBjcmVhdGUgdGhyZWUgbGFtYmRhIGZ1bmN0aW9ucyBmb3IgZGF0YWJhc2UgaW5pdGlhbGl6YXRpb24nLCAoKSA9PiB7XHJcbiAgICB0ZW1wbGF0ZS5yZXNvdXJjZUNvdW50SXMoJ0FXUzo6TGFtYmRhOjpGdW5jdGlvbicsIDMpO1xyXG4gIH0pO1xyXG59KTtcclxuIl19