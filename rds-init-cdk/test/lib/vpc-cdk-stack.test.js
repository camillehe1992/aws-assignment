"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("aws-cdk-lib");
const assertions_1 = require("aws-cdk-lib/assertions");
const Stack = require("../../lib/vpc-cdk-stack");
let app;
let stack;
let template;
describe('VpcCdkStack', () => {
    beforeAll(() => {
        app = new cdk.App();
        stack = new Stack.VpcCdkStack(app, 'VpcCdkStack');
        template = assertions_1.Template.fromStack(stack);
    });
    test('should create a VPC with CidrBlock 10.0.0.0/16', () => {
        template.hasResourceProperties('AWS::EC2::VPC', {
            CidrBlock: '10.0.0.0/16'
        });
    });
    test('should create a NAT Gateway', () => {
        template.hasResource('AWS::EC2::NatGateway', {});
    });
    test('should create a Internet Gateway', () => {
        template.hasResource('AWS::EC2::InternetGateway', {});
    });
    test('should create 4 Subnets', () => {
        template.resourceCountIs('AWS::EC2::Subnet', 4);
        ['10.0.0.0/24', '10.0.1.0/24', '10.0.2.0/28', '10.0.2.16/28'].forEach(cidrBlock => {
            template.hasResourceProperties('AWS::EC2::Subnet', assertions_1.Match.objectLike({
                CidrBlock: cidrBlock
            }));
        });
    });
    test('should create 3 Security Groups', () => {
        template.resourceCountIs('AWS::EC2::SecurityGroup', 3);
        template.resourceCountIs('AWS::EC2::Subnet', 4);
        ['web-server-sg', 'backend-server-sg', 'database-server-sg'].forEach(name => {
            template.hasResourceProperties('AWS::EC2::SecurityGroup', assertions_1.Match.objectLike({
                GroupName: name
            }));
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnBjLWNkay1zdGFjay50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidnBjLWNkay1zdGFjay50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQW1DO0FBQ25DLHVEQUF5RDtBQUN6RCxpREFBaUQ7QUFFakQsSUFBSSxHQUFZLENBQUM7QUFDakIsSUFBSSxLQUFnQixDQUFDO0FBQ3JCLElBQUksUUFBaUMsQ0FBQztBQUV0QyxRQUFRLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRTtJQUMzQixTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ2IsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ2xELFFBQVEsR0FBRyxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxnREFBZ0QsRUFBRSxHQUFHLEVBQUU7UUFDMUQsUUFBUSxDQUFDLHFCQUFxQixDQUFDLGVBQWUsRUFBRTtZQUM5QyxTQUFTLEVBQUUsYUFBYTtTQUN6QixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLEVBQUU7UUFDdkMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxzQkFBc0IsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNuRCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxrQ0FBa0MsRUFBRSxHQUFHLEVBQUU7UUFDNUMsUUFBUSxDQUFDLFdBQVcsQ0FBQywyQkFBMkIsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN4RCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyx5QkFBeUIsRUFBRSxHQUFHLEVBQUU7UUFDbkMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNoRCxDQUFDLGFBQWEsRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLGNBQWMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNoRixRQUFRLENBQUMscUJBQXFCLENBQUMsa0JBQWtCLEVBQUUsa0JBQUssQ0FBQyxVQUFVLENBQUM7Z0JBQ2xFLFNBQVMsRUFBRSxTQUFTO2FBQ3JCLENBQUMsQ0FBQyxDQUFDO1FBQ04sQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxpQ0FBaUMsRUFBRSxHQUFHLEVBQUU7UUFDM0MsUUFBUSxDQUFDLGVBQWUsQ0FBQyx5QkFBeUIsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUV2RCxRQUFRLENBQUMsZUFBZSxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2hELENBQUMsZUFBZSxFQUFFLG1CQUFtQixFQUFFLG9CQUFvQixDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzFFLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyx5QkFBeUIsRUFBRSxrQkFBSyxDQUFDLFVBQVUsQ0FBQztnQkFDekUsU0FBUyxFQUFFLElBQUk7YUFDaEIsQ0FBQyxDQUFDLENBQUM7UUFDTixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xyXG5pbXBvcnQgeyBUZW1wbGF0ZSwgTWF0Y2ggfSBmcm9tICdhd3MtY2RrLWxpYi9hc3NlcnRpb25zJztcclxuaW1wb3J0ICogYXMgU3RhY2sgZnJvbSAnLi4vLi4vbGliL3ZwYy1jZGstc3RhY2snO1xyXG5cclxubGV0IGFwcDogY2RrLkFwcDtcclxubGV0IHN0YWNrOiBjZGsuU3RhY2s7XHJcbmxldCB0ZW1wbGF0ZTogY2RrLmFzc2VydGlvbnMuVGVtcGxhdGU7XHJcblxyXG5kZXNjcmliZSgnVnBjQ2RrU3RhY2snLCAoKSA9PiB7XHJcbiAgYmVmb3JlQWxsKCgpID0+IHtcclxuICAgIGFwcCA9IG5ldyBjZGsuQXBwKCk7XHJcbiAgICBzdGFjayA9IG5ldyBTdGFjay5WcGNDZGtTdGFjayhhcHAsICdWcGNDZGtTdGFjaycpO1xyXG4gICAgdGVtcGxhdGUgPSBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spO1xyXG4gIH0pO1xyXG4gIFxyXG4gIHRlc3QoJ3Nob3VsZCBjcmVhdGUgYSBWUEMgd2l0aCBDaWRyQmxvY2sgMTAuMC4wLjAvMTYnLCAoKSA9PiB7XHJcbiAgICB0ZW1wbGF0ZS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6RUMyOjpWUEMnLCB7XHJcbiAgICAgIENpZHJCbG9jazogJzEwLjAuMC4wLzE2J1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgdGVzdCgnc2hvdWxkIGNyZWF0ZSBhIE5BVCBHYXRld2F5JywgKCkgPT4ge1xyXG4gICAgdGVtcGxhdGUuaGFzUmVzb3VyY2UoJ0FXUzo6RUMyOjpOYXRHYXRld2F5Jywge30pO1xyXG4gIH0pO1xyXG4gIFxyXG4gIHRlc3QoJ3Nob3VsZCBjcmVhdGUgYSBJbnRlcm5ldCBHYXRld2F5JywgKCkgPT4ge1xyXG4gICAgdGVtcGxhdGUuaGFzUmVzb3VyY2UoJ0FXUzo6RUMyOjpJbnRlcm5ldEdhdGV3YXknLCB7fSk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgdGVzdCgnc2hvdWxkIGNyZWF0ZSA0IFN1Ym5ldHMnLCAoKSA9PiB7XHJcbiAgICB0ZW1wbGF0ZS5yZXNvdXJjZUNvdW50SXMoJ0FXUzo6RUMyOjpTdWJuZXQnLCA0KTtcclxuICAgIFsnMTAuMC4wLjAvMjQnLCAnMTAuMC4xLjAvMjQnLCAnMTAuMC4yLjAvMjgnLCAnMTAuMC4yLjE2LzI4J10uZm9yRWFjaChjaWRyQmxvY2sgPT4ge1xyXG4gICAgICB0ZW1wbGF0ZS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6RUMyOjpTdWJuZXQnLCBNYXRjaC5vYmplY3RMaWtlKHtcclxuICAgICAgICBDaWRyQmxvY2s6IGNpZHJCbG9ja1xyXG4gICAgICB9KSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuICBcclxuICB0ZXN0KCdzaG91bGQgY3JlYXRlIDMgU2VjdXJpdHkgR3JvdXBzJywgKCkgPT4ge1xyXG4gICAgdGVtcGxhdGUucmVzb3VyY2VDb3VudElzKCdBV1M6OkVDMjo6U2VjdXJpdHlHcm91cCcsIDMpO1xyXG4gIFxyXG4gICAgdGVtcGxhdGUucmVzb3VyY2VDb3VudElzKCdBV1M6OkVDMjo6U3VibmV0JywgNCk7XHJcbiAgICBbJ3dlYi1zZXJ2ZXItc2cnLCAnYmFja2VuZC1zZXJ2ZXItc2cnLCAnZGF0YWJhc2Utc2VydmVyLXNnJ10uZm9yRWFjaChuYW1lID0+IHtcclxuICAgICAgdGVtcGxhdGUuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVDMjo6U2VjdXJpdHlHcm91cCcsIE1hdGNoLm9iamVjdExpa2Uoe1xyXG4gICAgICAgIEdyb3VwTmFtZTogbmFtZVxyXG4gICAgICB9KSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7Il19